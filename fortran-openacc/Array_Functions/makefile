# Makefile with autodependancy generation
# Note: Before running, you need to install fortdepend `pip install fortdepend` 
# 		fortdepend path can vary so make sure you edit the MAKEDEPEND variable

## Compiler Flags
hpc_install_path=/opt/nvidia/hpc_sdk/Linux_x86_64/2020/compilers/bin
FC=$(hpc_install_path)/nvfortran		#nvidia fortran compiler
FFLAGS= -g  # Note: Compiler optimization flags like -O2 will interfere with debugging (-g)
LINKER = $(FC) -o
FCLINKS = -g 
#FFLAGS=-Wall -Wextra -fopenmp		# OpenMP

# $(DEP_FILE) is a .dep file generated by fort_depend.py
DEP_FILE = my_project.dep
PROG = main.exe

# Source files to compile
SOURCES := $(shell find $(SOURCE_DIR) -name '*.f95')
OBJECTS := $(SOURCES:.f95=.o)
$(info $(SOURCES))

build: | check create_objects $(PROG)	

## Auto Generation of Dependancies 
MAKEDEPEND=~/anaconda3/envs/dev/bin/fortdepend
.PHONY: check
check:
ifeq (,$(wildcard $(DEP_FILE)))
	@echo "Creating dependancy file"
	$(shell $(MAKEDEPEND) -f $(SOURCES) -o $(DEP_FILE))	
else
	@echo "$(DEP_FILE) exists, skipping"
endif
-include $(DEP_FILE)



.PHONY: clean
clean :
	@rm -rf *.mod *.o *.exe *.dep

create_objects : *.f95
	@echo "-----------------------------"
	@echo "Creating modules"
	@echo "-----------------------------"
	$(FC) $(FFLAGS) -c $<

%.o : %.f95
	@echo "-----------------------------"
	@echo "Compiling the files into objects"
	@echo "-----------------------------"
	$(FC) $(FFLAGS) -c $<

$(PROG) : $(OBJECTS)
	@echo "-----------------------------"
	@echo "Creating the executable"
	@echo "-----------------------------"
	$(LINKER) $(PROG) $(OBJECTS) $(FCLINKS)